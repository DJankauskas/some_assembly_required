use crate::ast::{Instruction, Register};

grammar;

Register: Register = {
    <r: r"r[0-9]+"> => Register::new(r[1..].parse().unwrap()),
}

Constant: u64 = {
    <c: r"[0-9]+"> => c.parse().unwrap(),
}

Instruction: Instruction = {
    "nop" => Instruction::Nop,
    "mov" <Register> "," <Constant> => Instruction::Mov(<>),
    "add" <r0: Register> "," <r1: Register> "," <r2: Register> => Instruction::Add(r0, r1, r2),
    "sub" <r0: Register> "," <r1: Register> "," <r2: Register> => Instruction::Sub(r0, r1, r2),
    "mul" <r0: Register> "," <r1: Register> "," <r2: Register> => Instruction::Mul(r0, r1, r2),
    "div" <r0: Register> "," <r1: Register> "," <r2: Register> => Instruction::Div(r0, r1, r2),
    "print" => Instruction::Print,
    "copy" <r0: Register> "," <r1: Register> => Instruction::Copy(r0, r1),
    "beq" <r0: Register> "," <r1: Register> "," <r2: Register> => Instruction::Beq(r0, r1, r2),
    "bne" <r0: Register> "," <r1: Register> "," <r2: Register> => Instruction::Bne(r0, r1, r2),
    "j" <Constant> => Instruction::J(<>),
    "jr" <Register> => Instruction::Jr(<>),
    "halt" => Instruction::Halt,
}

pub Program: Vec<Instruction> = {
    Instruction* => <>,
}