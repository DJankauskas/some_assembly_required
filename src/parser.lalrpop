use lalrpop_util::ParseError;
use crate::ast::{Instruction, Register, ProgramElement};

grammar;

Register: Register = {
    "r0" => Register::new(0),
    "r1" => Register::new(1),
    "r2" => Register::new(2),
    "r3" => Register::new(3),
    "r4" => Register::new(4),
    "r5" => Register::new(5),
    "r6" => Register::new(6),
    "r7" => Register::new(7),
    "r8" => Register::new(8),
    "r9" => Register::new(9),
    "r10" => Register::new(10),
    "r11" => Register::new(11),
    "r12" => Register::new(12),
    "r13" => Register::new(13),
    "r14" => Register::new(14),
    "r15" => Register::new(15),
}

Constant: i64 = {
    <c: r"[0-9]+"> =>? c.parse().map_err(|_| ParseError::User { error: "Immediate out of bounds" }),
    <c: r"-[0-9]+"> =>? c.parse().map_err(|_| ParseError::User { error: "Immediate out of bounds" }),
}

Instruction: Instruction = {
    "nop" => Instruction::Nop,
    "mov" <Register> "," <Constant> => Instruction::Mov(<>),
    "add" <r0: Register> "," <r1: Register> "," <r2: Register> => Instruction::Add(r0, r1, r2),
    "sub" <r0: Register> "," <r1: Register> "," <r2: Register> => Instruction::Sub(r0, r1, r2),
    "mul" <r0: Register> "," <r1: Register> "," <r2: Register> => Instruction::Mul(r0, r1, r2),
    "div" <r0: Register> "," <r1: Register> "," <r2: Register> => Instruction::Div(r0, r1, r2),
    "print" => Instruction::Print,
    "printr" => Instruction::Printr,
    "copy" <r0: Register> "," <r1: Register> => Instruction::Copy(r0, r1),
    "beq" <r0: Register> "," <r1: Register> "," <r2: Register> => Instruction::Beq(r0, r1, r2),
    "bne" <r0: Register> "," <r1: Register> "," <r2: Register> => Instruction::Bne(r0, r1, r2),
    "j" <Register> => Instruction::J(<>),
    "rj" <Register> => Instruction::Rj(<>),
    "halt" => Instruction::Halt,
    "write" <dst: Register> "," "[" <instr: Instruction> "]" => Instruction::Write(dst, Box::new(instr)),
}

Comment: String = {
    <c: r";.*(\r\n|\r|\n)"> => c.to_string(),
}

ProgramElement: ProgramElement = {
    <i: Instruction> => ProgramElement::Instruction(i),
    <c: Comment> => ProgramElement::Comment(c),
}

pub Program: Vec<ProgramElement> = {
    ProgramElement* => <>,
}